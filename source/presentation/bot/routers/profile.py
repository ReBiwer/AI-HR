"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HH API.
"""

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from dishka import FromDishka

from source.application.services.hh_service import IHHService
from source.presentation.bot.utils.token_manager import TokenManager

router = Router()


@router.message(Command("profile"))
async def show_profile(
    message: Message,
    state: FSMContext,
    hh_service: FromDishka[IHHService],
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è HH.ru.

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ storage
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    token_manager = TokenManager(state)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token = await token_manager.get_access_token()

    if not access_token:
        await message.answer(
            "‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ: /start"
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ hh_service –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è)
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ HH API
        # –ù–∞–ø—Ä–∏–º–µ—Ä: user_data = await hh_service.get_user_me(access_token)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        user_info = await token_manager.get_user_info()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Å–∫–æ—Ä–æ —Ç–æ–∫–µ–Ω
        needs_refresh = await token_manager.needs_refresh()
        token_status = "‚ö†Ô∏è –°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç" if needs_refresh else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"

        await message.answer(
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å HH.ru</b>\n\n"
            f"ID: {user_info.hh_id}\n"
            f"–ò–º—è: {user_info.name}\n"
            f"–û—Ç—á–µ—Å—Ç–≤–æ: {user_info.mid_name}\n\n"
            f"–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {token_status}"
        )

    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ: /start"
        )
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
        await token_manager.clear_tokens()


@router.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    """
    –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤).

    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
    - –ë–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Ç–æ–∫–µ–Ω–æ–≤
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    token_manager = TokenManager(state)

    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    await token_manager.clear_tokens()

    await message.answer(
        "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
