from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from dishka import FromDishka

from source.presentation.bot.storage_keys import StorageKeys
from source.presentation.bot.utils.splitter import split_long_message
from source.domain.entities.user import UserEntity

router = Router()


@router.message(Command("profile"))
async def show_profile(
    message: Message,
    user: FromDishka[UserEntity],
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """

    try:
        text_message = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å HH.ru</b>\n\n{user}"
        chunks_message = split_long_message(text_message)
        for mess in chunks_message:
            await message.answer(mess)
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ: /start"
        )


@router.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    """
    –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏—Ö FSMContext).
    """
    await state.set_data({StorageKeys.USER_INFO: None})

    await message.answer(
        "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n" "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
