from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from dishka import FromDishka

from source.presentation.bot.storage_keys import StorageKeys
from source.presentation.bot.utils.splitter import split_long_message
from source.infrastructure.services.hh_service import CustomTokenManager
from source.application.services.hh_service import IHHService
from source.domain.entities.user import UserEntity

router = Router()


@router.message(Command("profile"))
async def show_profile(
    message: Message,
    token_manager: FromDishka[CustomTokenManager],
    user: FromDishka[UserEntity | None],
    hh_service: FromDishka[IHHService],
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """

    if user:
        access_token = await token_manager.ensure_access(user.hh_id)
        if not access_token:
            await message.answer(
                "‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ: /start"
            )
            return
        try:
            text_message = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å HH.ru</b>\n\n{user}"
            chunks_message = split_long_message(text_message)
            for mess in chunks_message:
                await message.answer(mess)
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ: /start"
            )
    else:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:\n"
            f"<a href='{hh_service.get_auth_url("telegram")}'>üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ HH</a>\n\n"
        )


@router.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    """
    –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ—á–∏—Å—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏—Ö FSMContext).
    """
    await state.set_data({StorageKeys.USER_INFO: None})

    await message.answer(
        "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n" "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
